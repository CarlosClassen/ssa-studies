workspace {

  model {
    professor = person "Professor" "A professor who can create teams, create projects, and assign projects to teams."
    student = person "Student" "A student who can view and submit projects."

    projectSystem = softwareSystem "Project System" "Allows creation and management of student teams and their projects." {
      
      representationService = container "Representation Service" "Manages the presentation layer for both professors and students." "Web Application" {
        webServer = component "Web Server" "Handles HTTP requests and serves web pages."
        businessLogic = component "Business Logic" "Handles the core functionality of team and project management."
        sessionManager = component "Session Manager" "Manages user sessions and authentication."
      }

      dataManager = container "Data Manager" "Handles database operations and data validation." "Service" {
        teamsDao = component "Teams DAO" "Data access operations for teams."
        projectsDao = component "Projects DAO" "Data access operations for projects."
        submissionsDao = component "Submissions DAO" "Data access operations for submissions."
        dataValidator = component "Data Validator" "Validates input data for consistency and correctness."
        queryProcessor = component "Query Processor" "Processes and optimizes database queries."
      }
      
      database = container "Database" "Shared database between submodules of the SIS" "Database" { 
            tags "Database"
            teamsTable = component "Teams Table" "Stores information about teams."
            projectsTable = component "Projects Table" "Stores information about projects."
            submissionsTable = component "Submissions Table" "Stores information about project submissions."
      }
      
      representationService -> dataManager "Uses"
      dataManager -> database "Reads from and writes to"
    }
    
   
    
    professor -> representationService "Interacts with"
    student -> representationService "Interacts with"
  }

  views {
    systemContext projectSystem {
      include professor
      include student
      autolayout lr
    }

    container projectSystem {
      include *
      autolayout lr
    }

    component representationService {
      include *
      autolayout lr
    }

    component dataManager {
      include *
      autolayout lr
    }

    styles {
      element "Software System" {
        background #1168bd
        color #ffffff
      }
      element "Container" {
        background #438dd5
        color #ffffff
      }
      element "Component" {
        background #85bbf0
        color #000000
      }
      element "Person" {
        shape person
        background #08427b
        color #ffffff
      }
      element "Database" {
        shape cylinder
        background #facc2e
        color #000000
      }
    }
  }
}
